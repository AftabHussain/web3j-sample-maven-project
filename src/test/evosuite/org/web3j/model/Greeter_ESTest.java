/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 22:04:23 GMT 2020
 */

package org.web3j.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.net.URI;
import java.time.ZoneId;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import okhttp3.OkHttpClient;
import org.bouncycastle.math.ec.ECConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.web3j.crypto.Credentials;
import org.web3j.model.Greeter;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.Web3jService;
import org.web3j.protocol.admin.Admin;
import org.web3j.protocol.admin.JsonRpc2_0Admin;
import org.web3j.protocol.core.DefaultBlockParameterNumber;
import org.web3j.protocol.core.JsonRpc2_0Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.http.HttpService;
import org.web3j.protocol.ipc.IpcService;
import org.web3j.protocol.ipc.UnixIpcService;
import org.web3j.protocol.websocket.WebSocketClient;
import org.web3j.protocol.websocket.WebSocketService;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.ManagedTransaction;
import org.web3j.tx.ReadonlyTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.tx.gas.StaticGasProvider;
import org.web3j.tx.response.NoOpProcessor;
import rx.Observable;
import rx.internal.util.RxThreadFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Greeter_ESTest extends Greeter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnixIpcService unixIpcService0 = new UnixIpcService("oK,D:{judDPO:DH9");
      JsonRpc2_0Web3j jsonRpc2_0Web3j0 = new JsonRpc2_0Web3j(unixIpcService0);
      BigInteger bigInteger0 = DefaultGasProvider.GAS_LIMIT;
      BigInteger bigInteger1 = ECConstants.THREE;
      Greeter greeter0 = Greeter.load((String) null, (Web3j) jsonRpc2_0Web3j0, (TransactionManager) null, bigInteger0, bigInteger1);
      assertNull(greeter0.getContractAddress());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, map0);
      WebSocketService webSocketService0 = new WebSocketService(webSocketClient0, true);
      Admin admin0 = Admin.build((Web3jService) webSocketService0);
      DefaultGasProvider defaultGasProvider0 = new DefaultGasProvider();
      // Undeclared exception!
      try { 
        Greeter.load("L8u", (Web3j) admin0, (Credentials) null, defaultGasProvider0.GAS_PRICE, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.tx.RawTransactionManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, (-421L), (ScheduledExecutorService) null);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "&?-xrT9h8`J(kCn`Gk");
      BigInteger bigInteger0 = ECConstants.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      RemoteCall<Greeter> remoteCall0 = Greeter.deploy(web3j0, (TransactionManager) readonlyTransactionManager0, greeter0.GAS_LIMIT, greeter0.GAS_PRICE, "rx.internal.operators.OperatorScan$2");
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpService httpService0 = new HttpService("j!|T1g`?\"", (OkHttpClient) null, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      NoOpProcessor noOpProcessor0 = new NoOpProcessor(web3j0);
      TransactionReceipt transactionReceipt0 = noOpProcessor0.waitForTransactionReceipt("");
      // Undeclared exception!
      try { 
        greeter0.getModifiedEvents(transactionReceipt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Empty transaction receipt, only transaction hash is available
         //
         verifyException("org.web3j.tx.response.EmptyTransactionReceipt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, (-421L), (ScheduledExecutorService) null);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "&?-xrT9h8`J(kCn`Gk");
      BigInteger bigInteger0 = ECConstants.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      // Undeclared exception!
      try { 
        greeter0.getModifiedEvents((TransactionReceipt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.tx.Contract", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, map0);
      WebSocketService webSocketService0 = new WebSocketService(webSocketClient0, true);
      Admin admin0 = Admin.build((Web3jService) webSocketService0);
      BigInteger bigInteger0 = ECConstants.EIGHT;
      // Undeclared exception!
      try { 
        Greeter.deploy((Web3j) admin0, (Credentials) null, bigInteger0, bigInteger0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.abi.TypeEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IpcService ipcService0 = new IpcService();
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("*VWq]/");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1463, rxThreadFactory0);
      JsonRpc2_0Admin jsonRpc2_0Admin0 = new JsonRpc2_0Admin(ipcService0, (-216L), scheduledThreadPoolExecutor0);
      NoOpProcessor noOpProcessor0 = new NoOpProcessor(jsonRpc2_0Admin0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(jsonRpc2_0Admin0, "", noOpProcessor0);
      DefaultGasProvider defaultGasProvider0 = new DefaultGasProvider();
      Greeter greeter0 = null;
      try {
        greeter0 = new Greeter("*VWq]/", jsonRpc2_0Admin0, clientTransactionManager0, defaultGasProvider0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to determine sync status of node
         //
         verifyException("org.web3j.ens.EnsResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnixIpcService unixIpcService0 = new UnixIpcService("b=qQa0)u");
      Admin admin0 = Admin.build((Web3jService) unixIpcService0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(admin0, "b=qQa0)u");
      DefaultGasProvider defaultGasProvider0 = new DefaultGasProvider();
      Greeter greeter0 = null;
      try {
        greeter0 = new Greeter("b=qQa0)u", admin0, clientTransactionManager0, defaultGasProvider0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // could not load FFI provider jnr.ffi.provider.jffi.Provider
         //
         verifyException("jnr.ffi.provider.InvalidRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnixIpcService unixIpcService0 = new UnixIpcService("");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2237);
      Web3j web3j0 = Web3j.build((Web3jService) unixIpcService0, 1349L, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(web3j0, "");
      BigInteger bigInteger0 = ECConstants.THREE;
      Greeter greeter0 = null;
      try {
        greeter0 = new Greeter("\"T(Q_xMQ?", web3j0, clientTransactionManager0, bigInteger0, bigInteger0);
        fail("Expecting exception: UnsatisfiedLinkError");
      
      } catch(UnsatisfiedLinkError e) {
         //
         // could not load FFI provider jnr.ffi.provider.jffi.Provider
         //
         verifyException("jnr.ffi.provider.InvalidRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0);
      ThreadFactory threadFactory0 = RxThreadFactory.NONE;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(772, threadFactory0);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, 5343L, (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(web3j0, "|pQ=d'l`", 772, (-5038));
      BigInteger bigInteger0 = ManagedTransaction.GAS_PRICE;
      Greeter greeter0 = new Greeter((String) null, web3j0, clientTransactionManager0, bigInteger0, bigInteger0);
      assertNull(greeter0.getContractAddress());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Greeter.ModifiedEventResponse greeter_ModifiedEventResponse0 = new Greeter.ModifiedEventResponse();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, (-421L), (ScheduledExecutorService) null);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "&?-xrT9h8`J(kCn`Gk");
      BigInteger bigInteger0 = ECConstants.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      RemoteCall<TransactionReceipt> remoteCall0 = greeter0.newGreeting("&?-xrT9h8`J(kCn`Gk");
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(",iE?5:0+", okHttpClient0, false);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      JsonRpc2_0Admin jsonRpc2_0Admin0 = new JsonRpc2_0Admin(httpService0, 0L, scheduledThreadPoolExecutor0);
      BigInteger bigInteger0 = DefaultGasProvider.GAS_PRICE;
      Greeter greeter0 = null;
      try {
        greeter0 = new Greeter(",iE?5:0+", jsonRpc2_0Admin0, (TransactionManager) null, bigInteger0, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to determine sync status of node
         //
         verifyException("org.web3j.ens.EnsResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpService httpService0 = new HttpService();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Admin admin0 = Admin.build((Web3jService) httpService0, (-4408L), (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(admin0, "C{la}9n*d");
      // Undeclared exception!
      try { 
        Greeter.load("", (Web3j) admin0, (TransactionManager) readonlyTransactionManager0, bigInteger0, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to determine sync status of node
         //
         verifyException("org.web3j.ens.EnsResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, (-421L), (ScheduledExecutorService) null);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "&?-xrT9h8`J(kCn`Gk");
      BigInteger bigInteger0 = ECConstants.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      RemoteCall<String> remoteCall0 = greeter0.greet();
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, (-421L), (ScheduledExecutorService) null);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "&?-xrT9h8`J(kCn`Gk");
      BigInteger bigInteger0 = ECConstants.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      DefaultBlockParameterNumber defaultBlockParameterNumber0 = new DefaultBlockParameterNumber(40);
      EthFilter ethFilter0 = new EthFilter(defaultBlockParameterNumber0, defaultBlockParameterNumber0, "H7IN-[~oyQ&Ai");
      Observable<Greeter.ModifiedEventResponse> observable0 = greeter0.modifiedEventObservable(ethFilter0);
      assertNotNull(observable0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, map0);
      WebSocketService webSocketService0 = new WebSocketService(webSocketClient0, true);
      Admin admin0 = Admin.build((Web3jService) webSocketService0);
      BigInteger bigInteger0 = ECConstants.EIGHT;
      RemoteCall<Greeter> remoteCall0 = Greeter.deploy((Web3j) admin0, (Credentials) null, bigInteger0, bigInteger0, "more produced than requested");
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = DefaultGasProvider.GAS_LIMIT;
      Greeter greeter0 = null;
      try {
        greeter0 = new Greeter("", (Web3j) null, (Credentials) null, bigInteger0, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.tx.RawTransactionManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      WebSocketClient webSocketClient0 = new WebSocketClient(uRI0, map0);
      WebSocketService webSocketService0 = new WebSocketService(webSocketClient0, true);
      Admin admin0 = Admin.build((Web3jService) webSocketService0);
      DefaultGasProvider defaultGasProvider0 = new DefaultGasProvider();
      // Undeclared exception!
      try { 
        Greeter.load((String) null, (Web3j) admin0, (Credentials) null, (ContractGasProvider) defaultGasProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.tx.RawTransactionManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpService httpService0 = new HttpService(okHttpClient0, false);
      Web3j web3j0 = Web3j.build((Web3jService) httpService0, (-421L), (ScheduledExecutorService) null);
      ReadonlyTransactionManager readonlyTransactionManager0 = new ReadonlyTransactionManager(web3j0, "&?-xrT9h8`J(kCn`Gk");
      BigInteger bigInteger0 = ECConstants.ZERO;
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      Greeter greeter0 = new Greeter((String) null, web3j0, readonlyTransactionManager0, staticGasProvider0);
      RemoteCall<TransactionReceipt> remoteCall0 = greeter0.kill();
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Admin admin0 = Admin.build((Web3jService) null);
      NoOpProcessor noOpProcessor0 = new NoOpProcessor(admin0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(admin0, "nm+Tlk/Le@r}U+jysu", noOpProcessor0);
      StaticGasProvider staticGasProvider0 = new StaticGasProvider((BigInteger) null, (BigInteger) null);
      RemoteCall<Greeter> remoteCall0 = Greeter.deploy((Web3j) admin0, (TransactionManager) clientTransactionManager0, (ContractGasProvider) staticGasProvider0, "nm+Tlk/Le@r}U+jysu");
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpService httpService0 = new HttpService(false);
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("rx.internal.operators.OperatorGroupBy$State");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, rxThreadFactory0);
      JsonRpc2_0Admin jsonRpc2_0Admin0 = new JsonRpc2_0Admin(httpService0, (-1L), scheduledThreadPoolExecutor0);
      BigInteger bigInteger0 = ECConstants.ZERO;
      // Undeclared exception!
      try { 
        Greeter.load("org.web3j.model.Greeter$5", (Web3j) jsonRpc2_0Admin0, (Credentials) null, bigInteger0, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.tx.RawTransactionManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpService httpService0 = new HttpService();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      Admin admin0 = Admin.build((Web3jService) httpService0, (-4408L), (ScheduledExecutorService) scheduledThreadPoolExecutor0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      StaticGasProvider staticGasProvider0 = new StaticGasProvider(bigInteger0, bigInteger0);
      RemoteCall<Greeter> remoteCall0 = Greeter.deploy((Web3j) admin0, (Credentials) null, (ContractGasProvider) staticGasProvider0, "FR%{\"");
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultGasProvider defaultGasProvider0 = new DefaultGasProvider();
      Greeter greeter0 = null;
      try {
        greeter0 = new Greeter(".>", (Web3j) null, (Credentials) null, defaultGasProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.web3j.tx.RawTransactionManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpService httpService0 = new HttpService("pi", false);
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("rx.internal.operators.OperatorGroupBy$State");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, rxThreadFactory0);
      JsonRpc2_0Admin jsonRpc2_0Admin0 = new JsonRpc2_0Admin(httpService0, (-1L), scheduledThreadPoolExecutor0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(jsonRpc2_0Admin0, "org.web3j.model.Greeter$ModifiedEventResponse");
      BigInteger bigInteger0 = ECConstants.ZERO;
      RemoteCall<Greeter> remoteCall0 = Greeter.deploy((Web3j) jsonRpc2_0Admin0, (TransactionManager) clientTransactionManager0, bigInteger0, bigInteger0, "a(W1x2 <'WHy6@D");
      assertNotNull(remoteCall0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpService httpService0 = new HttpService("pi", false);
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory("rx.internal.operators.OperatorGroupBy$State");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, rxThreadFactory0);
      JsonRpc2_0Admin jsonRpc2_0Admin0 = new JsonRpc2_0Admin(httpService0, (-1L), scheduledThreadPoolExecutor0);
      ClientTransactionManager clientTransactionManager0 = new ClientTransactionManager(jsonRpc2_0Admin0, "org.web3j.model.Greeter$ModifiedEventResponse");
      // Undeclared exception!
      try { 
        Greeter.load("org.web3j.model.Greeter$ModifiedEventResponse", (Web3j) jsonRpc2_0Admin0, (TransactionManager) clientTransactionManager0, (ContractGasProvider) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to determine sync status of node
         //
         verifyException("org.web3j.ens.EnsResolver", e);
      }
  }
}
